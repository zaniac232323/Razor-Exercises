@{
    Layout = "~/_Layout.cshtml";
    Page.Title = string.Format("Razor - {0}", "Exercise 04 - Update/Discontinue/Delete with Validation");

    var pid = Request.QueryString["pid"];
    if (pid.IsEmpty())
    {
        Response.Redirect("Exercise04.cshtml");
    }
    var albumid = Request.Form["AlbumId"];
    var title = Request.Form["Title"];
    //var supplierid = Request.Form["SupplierList"];
    var artistid = Request.Form["ArtistId"];
    var releaseYear = Request.Form["ReleaseYear"];
    var releaseLabel = Request.Form["ReleaseLabel"];
    //var unitsinstock = Request.Form["UnitsInStock"];
    //var unitsonorder = Request.Form["UnitsOnOrder"];
    //var reorderlevel = Request.Form["ReorderLevel"];
    //var discontinued = Request.Form["Discontinued"];
    var thebutton = Request.Form["theButton"];

    var message = "";

    //these are validator controls execute on the server side

    Validation.Add("Title",
        Validator.Required("Title is required"),
        Validator.StringLength(160, 1, "Title is limited to 160 characters"));

    Validation.Add("ArtistId",
        Validator.Required("artistID is required"));

    Validation.Add("ReleaseYear",
        Validator.Required("releaseYear is required"),
        Validator.Range(1950, DateTime.Today.Year, "release Year must be between 1950 and the current year"));

    Validation.Add("ReleaseLabel",
        Validator.StringLength(50, 1, "Title is limited to 50 characters"));

    //Validation.Add("UnitsInStock",
    //    Validator.Integer("Units in stock must be a number."),
    //    Validator.Range(0, 32767, "Units in stock must be between 0 and 32767"));

    //Validation.Add("UnitsOnOrder",
    //    Validator.Integer("Units on order must be a number."),
    //    Validator.Range(0, 32767, "Units on order must be between 0 and 32767"));

    //Validation.Add("ReorderLevel",
    //    Validator.Integer("Reorder level must be a number."),
    //    Validator.Range(0, 32767, "Reorder level must be between 0 and 32767"));

    if (IsPost)
    {
        //discontinued is a checkbox
        //the possible values from the check box is null (not checked) or "on" (checked)
        //the acceptable sql values for a bit are 0 and 1
        //if (discontinued == null)
        //{
        //    discontinued = "0";
        //}
        //else
        //{
        //    discontinued = "1";
        //}
    }
    else
    {
        albumid = pid;
        //discontinued = "0";
    }
    var db = Database.Open("CHINOOK");
    //var supplierStatement = "SELECT SupplierID, CompanyName "
    //                    + "FROM Suppliers "
    //                    + "ORDER BY CompanyName";
    //var querySuppliers = db.Query(supplierStatement);
    //var categoryStatement = "SELECT CategoryID, CategoryName "
    //                    + "FROM Categories "
    //                    + "ORDER BY CategoryName";
    //var queryCategories = db.Query(categoryStatement);
    var queryStatement = "SELECT AlbumId, Title, ArtistId, ReleaseYear, ReleaseLabel FROM Albums WHERE AlbumId = @0";
    var queryAlbums = db.QuerySingle(queryStatement, pid);
    if (queryAlbums == null)
    {
        message = "Album NOT found";
    }

    var artistquery = "SELECT ArtistId, Name FROM Artists ORDER BY Name";
    var artistList = db.Query(artistquery);
}

@section head{
    @*<link href="~/Content/MyCssCopy.css" rel="stylesheet" />*@
}

@section banner{
    <h1>@Page.Title</h1>
}
@if (IsPost)
{
    if (thebutton.Equals("backtosearch"))
    {
        Response.Redirect("Exercise04.cshtml");
    }

    if (Validation.IsValid())
    {
        try
        {
            //if (thebutton.Equals("discontinue"))
            //{
            //    var sqlcommand = "UPDATE Products SET "
            //                    + "Discontinued = 1 "
            //                    + "WHERE ProductID = @0";
            //    var rowsaffected = db.Execute(sqlcommand, albumid);
            //    if (rowsaffected > 0)
            //    {
            //        discontinued = "1";
            //        message = "Product has been DISCONTINUED";
            //    }
            //    else
            //    {
            //        message = "Product NOT found";
            //    }
            //}
            //else
            if (thebutton.Equals("update"))
            {
                var sqlcommand = "UPDATE Albums SET Title =@0, ArtistId = @1, ReleaseYear = @2, ReleaseLabel = @3 WHERE AlbumId = @4";
                var rowsaffected = db.Execute(sqlcommand, title,
                    albumid.Equals("0") ? null : albumid,
                    artistid.Equals("0") ? null : artistid,
                    string.IsNullOrEmpty(releaseYear) ? null : releaseYear,
                    string.IsNullOrEmpty(releaseLabel) ? null : releaseLabel);
                if (rowsaffected > 0)
                {
                    message = "Album has been UPDATED";
                }
                else
                {
                    message = "Album NOT found";
                }
            }
            else if (thebutton.Equals("delete"))
            {
                var deleteStatement = "DELETE Albums WHERE AlbumId = @0";

                var rows = db.Execute(deleteStatement, albumid);
                if (rows == 1)
                {
                    message = "Album has been DELETED";
                }
                else
                {
                    message = "Album NOT found";
                }
                albumid = "";
                title = "";
                //supplierid = "0";
                artistid = "0";
                releaseYear = "";
                releaseLabel = "";
                //unitsinstock = "";
                //unitsonorder = "";
                //reorderlevel = "";
                //discontinued = "0";
            }
        }
        catch (Exception ex)
        {
            <div class="col-12 text-center">
                <p style="color:firebrick; font-size:large">
                    Processing error: @ex.Message
                </p>
            </div>
        }
    }
}
else //IsPost=false
{
    if (message != "Product NOT found")
    {
        albumid = queryAlbums.AlbumId.ToString();
        title = queryAlbums.Title;
        //supplierid = queryAlbums.SupplierID == null ? "0" : queryAlbums.SupplierID.ToString();
        artistid = queryAlbums.ArtistId == null ? "0" : queryAlbums.ArtistId.ToString();
        releaseYear = queryAlbums.ReleaseYear == null ? "" : queryAlbums.ReleaseYear.ToString();
        releaseLabel = queryAlbums.ReleaseLabel;
        //unitsinstock = queryAlbums.UnitsInStock == null ? "" : queryAlbums.UnitsInStock.ToString();
        //unitsonorder = queryAlbums.UnitsOnOrder == null ? "" : queryAlbums.UnitsOnOrder.ToString();
        //reorderlevel = queryAlbums.ReorderLevel == null ? "" : queryAlbums.ReorderLevel.ToString();
        //discontinued = queryAlbums.Discontinued.ToString();
    }

}
@Html.ValidationSummary()

<div class="col-12 text-center">
    <p style="color:green">
        @message
    </p>
</div>
<form id="theForm" action="" method="post">
    <div class="row row-cols-2">
        <div class="col text-right">
            <label id="lblTitle" for="title">Title</label>
        </div>
        <div class="col text-left">
            <input type="text" name="title" value="@title" />
        </div><br />
        <div class="col text-right">
            <label id="lblSupplierList" for="SupplierList">Artist</label>
        </div>
        <div class="col text-left">
            <select name="artistID">
                <option value="0">select...</option>
                @foreach (var acollectionrow in artistList)
                {
                    if (acollectionrow.ArtistId.ToString() == artistid)
                    {
                        <option value="@acollectionrow[0]" selected>@acollectionrow[1]</option>
                    }
                    else
                    {
                        <option value="@acollectionrow[0]">@acollectionrow[1]</option>
                    }
                }
            </select>
        </div><br />
        <div class="col text-right">
            <label id="lblreleaseYear" for="releaseYear">Release Year</label>
        </div>
        <div class="col text-left">
            <input type="number" name="releaseYear" value="@releaseYear" />
        </div><br />
        <div class="col text-right">
            <label id="lblreleaseLabel" for="releaseLabel">Release Label</label>
        </div>
        <div class="col text-left">
            <input type="text" name="releaseLabel" value="@releaseLabel" />
        </div><br />
    </div>
    <div class="row">
        <div class="col-12 text-center">
            <button type="submit" name="theButton" id="theUpdate" class="btn btn-primary"
                    value="update">
                Update
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDiscontinue" class="btn btn-primary" formnovalidate
                    value="discontinue">
                Discontinue
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theDelete" class="btn btn-primary" formnovalidate
                    value="delete">
                Delete Record
            </button>&nbsp;&nbsp;&nbsp;
            <button type="submit" name="theButton" id="theCancel" class="btn btn-primary" formnovalidate
                    value="backtosearch">
                Back to Search
            </button>
        </div>
    </div>
    @* confirmation can be done on a button click using javascript
        we will ask the user to confirm the discontinuing of a product*@
    @*<script type="text/javascript">
        document.getElementById("theDiscontinue").onclick = ConfirmDiscontinue;
        function ConfirmDiscontinue() {
            return confirm("Are you sure you want to DISCONTINUE @title?");
        }
        document.getElementById("theDelete").onclick = ConfirmDelete;
        function ConfirmDelete() {
            return confirm("Are you sure you want to DELETE @title?");
        }
    </script>*@
</form>
